/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.politaktiv.map.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.politaktiv.map.model.Layer;
import org.politaktiv.map.model.LayerModel;
import org.politaktiv.map.model.LayerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Layer service. Represents a row in the &quot;politaktivmaptwo_Layer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.politaktiv.map.model.LayerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LayerImpl}.
 * </p>
 *
 * @author Paul Butenko
 * @see LayerImpl
 * @see org.politaktiv.map.model.Layer
 * @see org.politaktiv.map.model.LayerModel
 * @generated
 */
@JSON(strict = true)
public class LayerModelImpl extends BaseModelImpl<Layer> implements LayerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a layer model instance should use the {@link org.politaktiv.map.model.Layer} interface instead.
	 */
	public static final String TABLE_NAME = "politaktivmaptwo_Layer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "layerId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "label", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "portletInstance", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table politaktivmaptwo_Layer (layerId LONG not null primary key,createDate DATE null,label VARCHAR(75) null,userId LONG,portletInstance VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table politaktivmaptwo_Layer";
	public static final String ORDER_BY_JPQL = " ORDER BY layer.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY politaktivmaptwo_Layer.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.politaktiv.map.model.Layer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.politaktiv.map.model.Layer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.politaktiv.map.model.Layer"),
			true);
	public static long LABEL_COLUMN_BITMASK = 1L;
	public static long PORTLETINSTANCE_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Layer toModel(LayerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Layer model = new LayerImpl();

		model.setLayerId(soapModel.getLayerId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setLabel(soapModel.getLabel());
		model.setUserId(soapModel.getUserId());
		model.setPortletInstance(soapModel.getPortletInstance());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Layer> toModels(LayerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Layer> models = new ArrayList<Layer>(soapModels.length);

		for (LayerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.politaktiv.map.model.Layer"));

	public LayerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _layerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLayerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _layerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Layer.class;
	}

	@Override
	public String getModelClassName() {
		return Layer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("layerId", getLayerId());
		attributes.put("createDate", getCreateDate());
		attributes.put("label", getLabel());
		attributes.put("userId", getUserId());
		attributes.put("portletInstance", getPortletInstance());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long layerId = (Long)attributes.get("layerId");

		if (layerId != null) {
			setLayerId(layerId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String label = (String)attributes.get("label");

		if (label != null) {
			setLabel(label);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String portletInstance = (String)attributes.get("portletInstance");

		if (portletInstance != null) {
			setPortletInstance(portletInstance);
		}
	}

	@JSON
	@Override
	public long getLayerId() {
		return _layerId;
	}

	@Override
	public void setLayerId(long layerId) {
		_layerId = layerId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getLabel() {
		if (_label == null) {
			return StringPool.BLANK;
		}
		else {
			return _label;
		}
	}

	@Override
	public void setLabel(String label) {
		_columnBitmask |= LABEL_COLUMN_BITMASK;

		if (_originalLabel == null) {
			_originalLabel = _label;
		}

		_label = label;
	}

	public String getOriginalLabel() {
		return GetterUtil.getString(_originalLabel);
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getPortletInstance() {
		if (_portletInstance == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletInstance;
		}
	}

	@Override
	public void setPortletInstance(String portletInstance) {
		_columnBitmask |= PORTLETINSTANCE_COLUMN_BITMASK;

		if (_originalPortletInstance == null) {
			_originalPortletInstance = _portletInstance;
		}

		_portletInstance = portletInstance;
	}

	public String getOriginalPortletInstance() {
		return GetterUtil.getString(_originalPortletInstance);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Layer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Layer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Layer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LayerImpl layerImpl = new LayerImpl();

		layerImpl.setLayerId(getLayerId());
		layerImpl.setCreateDate(getCreateDate());
		layerImpl.setLabel(getLabel());
		layerImpl.setUserId(getUserId());
		layerImpl.setPortletInstance(getPortletInstance());

		layerImpl.resetOriginalValues();

		return layerImpl;
	}

	@Override
	public int compareTo(Layer layer) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), layer.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Layer)) {
			return false;
		}

		Layer layer = (Layer)obj;

		long primaryKey = layer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LayerModelImpl layerModelImpl = this;

		layerModelImpl._originalLabel = layerModelImpl._label;

		layerModelImpl._originalUserId = layerModelImpl._userId;

		layerModelImpl._setOriginalUserId = false;

		layerModelImpl._originalPortletInstance = layerModelImpl._portletInstance;

		layerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Layer> toCacheModel() {
		LayerCacheModel layerCacheModel = new LayerCacheModel();

		layerCacheModel.layerId = getLayerId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			layerCacheModel.createDate = createDate.getTime();
		}
		else {
			layerCacheModel.createDate = Long.MIN_VALUE;
		}

		layerCacheModel.label = getLabel();

		String label = layerCacheModel.label;

		if ((label != null) && (label.length() == 0)) {
			layerCacheModel.label = null;
		}

		layerCacheModel.userId = getUserId();

		layerCacheModel.portletInstance = getPortletInstance();

		String portletInstance = layerCacheModel.portletInstance;

		if ((portletInstance != null) && (portletInstance.length() == 0)) {
			layerCacheModel.portletInstance = null;
		}

		return layerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{layerId=");
		sb.append(getLayerId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", label=");
		sb.append(getLabel());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", portletInstance=");
		sb.append(getPortletInstance());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("org.politaktiv.map.model.Layer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>layerId</column-name><column-value><![CDATA[");
		sb.append(getLayerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>label</column-name><column-value><![CDATA[");
		sb.append(getLabel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletInstance</column-name><column-value><![CDATA[");
		sb.append(getPortletInstance());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Layer.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Layer.class };
	private long _layerId;
	private Date _createDate;
	private String _label;
	private String _originalLabel;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _portletInstance;
	private String _originalPortletInstance;
	private long _columnBitmask;
	private Layer _escapedModel;
}